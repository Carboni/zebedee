package com.github.onsdigital.zebedee.model;

import com.github.davidcarboni.cryptolite.Random;
import com.github.davidcarboni.httpino.Serialiser;
import com.github.onsdigital.zebedee.Builder;
import com.github.onsdigital.zebedee.Zebedee;
import com.github.onsdigital.zebedee.exceptions.BadRequestException;
import com.github.onsdigital.zebedee.exceptions.NotFoundException;
import com.github.onsdigital.zebedee.exceptions.UnauthorizedException;
import com.github.onsdigital.zebedee.exceptions.ZebedeeException;
import com.github.onsdigital.zebedee.json.*;
import org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import javax.crypto.SecretKey;
import java.io.IOException;
import java.security.PublicKey;

import static org.junit.Assert.*;

/**
 * Created by thomasridd on 18/11/15.
 */
public class KeyManagerTest {
    Zebedee zebedee;
    Builder builder;

    @Before
    public void setUp() throws Exception {
        builder = new Builder(this.getClass());
        zebedee = new Zebedee(builder.zebedee, false);
    }

    @After
    public void tearDown() throws Exception {
        builder.delete();
    }

    @Test
    public void isEncrypted_whenCollectionGenerated_isSetToFalse() throws ZebedeeException, IOException {
        // Given
        // a collection is created
        Session session = zebedee.openSession(builder.publisher1Credentials);
        CollectionDescription collectionDescription = new CollectionDescription();
        collectionDescription.name = this.getClass().getSimpleName() + "-" + Random.id();
        Collection.create(collectionDescription, zebedee, session.email);

        // When
        // we reload it
        Collection reloaded = zebedee.collections.list().getCollection(collectionDescription.id);

        // Then
        // isEncrypted is false
        assertEquals(false, reloaded.description.isEncrypted);
    }

    @Test
    public void isEncrypted_whenSetToTrue_persists() throws IOException, ZebedeeException {
        // Given
        // a collection is created, isEncrypted is set, and is set to true
        Session session = zebedee.openSession(builder.publisher1Credentials);
        CollectionDescription collectionDescription = new CollectionDescription();
        collectionDescription.name = this.getClass().getSimpleName() + "-" + Random.id();
        collectionDescription.isEncrypted = true;
        Collection.create(collectionDescription, zebedee, session.email);

        // When
        // we reload the collection
        Collection reloaded = zebedee.collections.list().getCollection(collectionDescription.id);

        // Then
        // isEncrypted is true
        assertEquals(true, reloaded.description.isEncrypted);
    }

    @Test
    public void userKeyring_whenCollectionGenerated_hasKeyForCollection() throws ZebedeeException, IOException {
        // Given
        // a user session
        Session session = zebedee.openSession(builder.publisher1Credentials);
        CollectionDescription collectionDescription = new CollectionDescription();
        collectionDescription.name = this.getClass().getSimpleName() + "-" + Random.id();
        assertEquals(0, builder.publisher1.keyring.size());

        // When
        // we generate the collection
        Collection.create(collectionDescription, zebedee, session.email);

        // Then
        // the user has a key for the collection
        User user = zebedee.users.get(session.email);
        assertEquals(1, user.keyring.size());

        // and in the keyringCache
        assertEquals(1, zebedee.keyringCache.get(session).keys.size());
    }

    @Test
    public void otherPublisherKeyring_whenCollectionGenerated_hasKeyForCollection() throws ZebedeeException, IOException {
        // Given
        // publisher A
        Session session = zebedee.openSession(builder.publisher1Credentials);
        CollectionDescription collectionDescription = new CollectionDescription();
        collectionDescription.name = this.getClass().getSimpleName() + "-" + Random.id();
        assertEquals(0, builder.publisher2.keyring.size());

        // When
        // a collection is generated by publisher A
        Collection.create(collectionDescription, zebedee, session.email);

        // Then
        // publisher B gets a key for the collection
        User user = zebedee.users.get(builder.publisher2.email);
        assertEquals(1, user.keyring.size());
    }

    private CollectionDescription publishCollection(Session session) throws IOException, ZebedeeException {
        CollectionDescription collectionDescription = new CollectionDescription();
        collectionDescription.name = this.getClass().getSimpleName() + "-" + Random.id();
        Collection.create(collectionDescription, zebedee, session.email);
        return collectionDescription;
    }

    @Test
    public void publisherKeyring_whenPasswordReset_receivesAllCollections() throws ZebedeeException, IOException {
        // Given
        // publisher A and details for publisher B
        Session sessionA = zebedee.openSession(builder.administratorCredentials);
        CollectionDescription collection = publishCollection(sessionA);

        assertEquals(1, zebedee.users.get(builder.administrator.email).keyring().size());
        assertEquals(1, zebedee.users.get(builder.publisher1.email).keyring().size());


        // When
        // publisher A resets password

        Credentials credentials = builder.publisher1Credentials;
        credentials.password = "Adam Bob Charlie Danny";
        zebedee.users.setPassword(sessionA, credentials);

        // Then
        // publisher A retains keys
        User user = zebedee.users.get(builder.publisher1.email);
        assertTrue(user.keyring.unlock(credentials.password));
        assertEquals(1, user.keyring().size());

    }

    @Test
    public void publisherKeyring_whenPasswordResetByAdmin_receivesNewPublicKey() throws ZebedeeException, IOException {
        // Given
        // admin A and details for publisher B
        Session sessionA = zebedee.openSession(builder.administratorCredentials);
        PublicKey initialPublicKey = builder.publisher2.keyring.getPublicKey();

        // When
        // admin A resets password
        Credentials credentials = builder.publisher2Credentials;
        credentials.password = "Adam Bob Charlie Danny";
        zebedee.users.setPassword(sessionA, credentials);

        // Then
        // publisher B gets a new public key
        PublicKey secondPublicKey = zebedee.users.get(builder.publisher2.email).keyring.getPublicKey();
        assertNotEquals(initialPublicKey.toString(), secondPublicKey.toString());
    }

    @Test
    public void publisherKeyring_whenPasswordResetBySelf_reencryptsKey() throws ZebedeeException, IOException {
        // Given
        // publisher A
        Session sessionA = zebedee.openSession(builder.publisher1Credentials);
        String oldPassword = builder.publisher1Credentials.password;
        assertTrue(builder.publisher1.keyring().unlock(oldPassword));

        // When
        // A resets own password
        Credentials credentials = builder.publisher1Credentials;
        credentials.oldPassword = credentials.password;
        credentials.password = "Adam Bob Charlie Danny";
        zebedee.users.setPassword(sessionA, credentials);

        // Then
        // A can unlock their keyring with the new password and not the old
        User reloaded =  zebedee.users.get(builder.publisher1.email);
        assertTrue(reloaded.keyring.unlock(credentials.password));
        assertFalse(reloaded.keyring.unlock(oldPassword));
    }

    @Test
    public void assignKeyToUser_givenUserWithoutKeyring_doesNothing() throws IOException, ZebedeeException {
        // Given
        // a publisher user without a key
        Session session = zebedee.openSession(builder.administratorCredentials);
        User user = Serialiser.deserialise("{\"name\":\"Alison Davies\",\"email\":\"a.davies@ons.gov.uk\",\"passwordHash\":\"VewEkE+p3X4zuLQP6fMBkhrPgY99y2ajXwWfTAYifH71CfROf3I8XU/K0Ps0dakJ\"}", User.class);
        zebedee.users.create(user, builder.administrator.email);
        zebedee.permissions.addEditor(user.email, session);

        // When
        // we publish a collection
        CollectionDescription collectionDescription = new CollectionDescription();
        collectionDescription.name = this.getClass().getSimpleName() + "-" + Random.id();
        Collection.create(collectionDescription, zebedee, session.email);

        // Then
        // they dont get a key
        user = zebedee.users.get(user.email);
        assertNull(user.keyring);
    }
}